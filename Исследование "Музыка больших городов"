Этап 1. Получение данных
Изучим данные, предоставленные сервисом для проекта.

Импорт библиотек
import pandas as pd # <импорт библиотеки pandas>
Прочитаем файл music_project.csv и сохраним его в переменной df.

df = pd.read_csv('/datasets/music_project.csv') # <чтение файла с данными с сохранением в df>
Получение первых 10 строк таблицы.

df.head(10)  # <получение первых 10 строк таблицы df>
userID	Track	artist	genre	City	time	Day
0	FFB692EC	Kamigata To Boots	The Mass Missile	rock	Saint-Petersburg	20:28:33	Wednesday
1	55204538	Delayed Because of Accident	Andreas Rönnberg	rock	Moscow	14:07:09	Friday
2	20EC38	Funiculì funiculà	Mario Lanza	pop	Saint-Petersburg	20:58:07	Wednesday
3	A3DD03C9	Dragons in the Sunset	Fire + Ice	folk	Saint-Petersburg	08:37:09	Monday
4	E2DC1FAE	Soul People	Space Echo	dance	Moscow	08:34:34	Monday
5	842029A1	Преданная	IMPERVTOR	rusrap	Saint-Petersburg	13:09:41	Friday
6	4CB90AA5	True	Roman Messer	dance	Moscow	13:00:07	Wednesday
7	F03E1C1F	Feeling This Way	Polina Griffith	dance	Moscow	20:47:49	Wednesday
8	8FA1D3BE	И вновь продолжается бой	NaN	ruspop	Moscow	09:17:40	Friday
9	E772D5C0	Pessimist	NaN	dance	Saint-Petersburg	21:20:49	Wednesday
Общая информация о данных таблицы df.

df.info() # <получение общей информации о данных в таблице df>
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 65079 entries, 0 to 65078
Data columns (total 7 columns):
  userID    65079 non-null object
Track       63848 non-null object
artist      57876 non-null object
genre       63881 non-null object
  City      65079 non-null object
time        65079 non-null object
Day         65079 non-null object
dtypes: object(7)
memory usage: 3.5+ MB
Рассмотрим полученную информацию подробнее.

Всего в таблице 7 столбцов, тип данных у каждого столбца - < напишите название типа данных >.

Подробно разберём, какие в df столбцы и какую информацию они содержат:

userID — идентификатор пользователя;
Track — название трека;
artist — имя исполнителя;
genre — название жанра;
City — город, в котором происходило прослушивание;
time — время, в которое пользователь слушал трек;
Day — день недели.
Количество значений в столбцах различается. Это говорит о том, что в данных есть <введите определение> значения.

Выводы

Каждая строка таблицы содержит информацию о композициях определённого жанра в определённом исполнении, которые пользователи слушали в одном из городов в определённое время и день недели. Две проблемы, которые нужно решать: пропуски и некачественные названия столбцов. Для проверки рабочих гипотез особенно ценны столбцы time, day и City. Данные из столбца genre позволят узнать самые популярные жанры.

Этап 2. Предобработка данных

Исключим пропуски, переименуем столбцы, а также проверим данные на наличие дубликатов.

Получаем перечень названий столбцов. Какая наблюдается проблема — кроме тех, что уже были названы ранее?

df.columns# <перечень названий столбцов таблицы df>
Index(['  userID', 'Track', 'artist', 'genre', '  City  ', 'time', 'Day'], dtype='object')
В названиях столбцов есть пробелы, которые могут затруднять доступ к данным.

Переименуем столбцы для удобства дальнейшей работы. Проверим результат.

df.set_axis(['user_id', 'track_name', 'artist_name', 'genre_name', 'city', 'time', 'weekday'], axis = 'columns', inplace = True)# <переименование столбцов>
df.columns# <проверка результатов - перечень названий столбцов>
Index(['user_id', 'track_name', 'artist_name', 'genre_name', 'city', 'time',
       'weekday'],
      dtype='object')
Проверим данные на наличие пропусков вызовом набора методов для суммирования пропущенных значений.

df.isnull().sum()

# <суммарное количество пропусков, выявленных методом isnull() в таблице df>
user_id           0
track_name     1231
artist_name    7203
genre_name     1198
city              0
time              0
weekday           0
dtype: int64
Пустые значения свидетельствуют, что для некоторых треков доступна не вся информация. Причины могут быть разные: скажем, не назван конкретный исполнитель народной песни. Хуже, если проблемы с записью данных. Каждый отдельный случай необходимо разобрать и выявить причину.

Заменяем пропущенные значения в столбцах с названием трека и исполнителя на строку 'unknown'. После этой операции нужно убедиться, что таблица больше не содержит пропусков.

df['track_name'] = df['track_name'].fillna('unknown')# <замена пропущенных значений в столбце 'track_name' на строку 'unknown' специальным методом замены>
df['artist_name'] = df['artist_name'].fillna('unknown')
df.isnull().sum()# <проверка: вычисление суммарного количества пропусков, выявленных в таблице df>
user_id           0
track_name        0
artist_name       0
genre_name     1198
city              0
time              0
weekday           0
dtype: int64
Удаляем в столбце с жанрами пустые значения; убеждаемся, что их больше не осталось.

df.dropna(subset = ['genre_name'], inplace = True)# <удаление пропущенных значений в столбце 'genre_name'>
df.isnull().sum()# <проверка>
user_id        0
track_name     0
artist_name    0
genre_name     0
city           0
time           0
weekday        0
dtype: int64
Необходимо установить наличие дубликатов. Если найдутся, удаляем, и проверяем, все ли удалились.

df.duplicated().sum()# <получение суммарного количества дубликатов в таблице df>
3755
df = df.drop_duplicates().reset_index(drop = True)# <удаление всех дубликатов из таблицы df специальным методом>
df.duplicated().sum()
# <проверка на отсутствие>
0
Дубликаты могли появиться вследствие сбоя в записи данных. Стоит обратить внимание и разобраться с причинами появления такого «информационного мусора».

Сохраняем список уникальных значений столбца с жанрами в переменной genres_list.

Объявим функцию find_genre() для поиска неявных дубликатов в столбце с жанрами. Например, когда название одного и того же жанра написано разными словами.

genres_list = df['genre_name'].unique()# <сохранение в переменной genres_list списка уникальных значений, выявленных специальным методом в столбце 'genre_name'>
def find_genre(name):
    i = 0
    for row in genres_list:
        if row == name:
            i+= 1
    return i
# <создание функции find_genre()>
# функция принимает как параметр строку с названием искомого жанра
# в теле объявляется переменная-счётчик, ей присваивается значение 0,
# затем цикл for проходит по списку уникальных значений
# если очередной элемент списка равен параметру функции, 
# то значение счётчика увеличивается на 1
# по окончании работы цикла функция возвращает значение счётчика
Вызов функции find_genre() для поиска различных вариантов названия жанра хип-хоп в таблице.

Правильное название — hiphop. Поищем другие варианты:

hip
hop
hip-hop
find_genre('hip')# <вызовом функции find_genre() проверяется наличие варианта 'hip'>
1
find_genre('hop')
# <проверяется наличие варианта 'hop'>
0
find_genre('hip-hop')
# <проверяется наличие варианта 'hip-hop'>
0
Объявим функцию find_hip_hop(), которая заменяет неправильное название этого жанра в столбце 'genre_name' на 'hiphop' и проверяет успешность выполнения замены.

Так исправляем все варианты написания, которые выявила проверка.

def find_hip_hop(df, wrong):
    df['genre_name'] = df['genre_name'].replace(wrong,'hiphop')
    result = df[df['genre_name'] == wrong]['genre_name'].count()
    return result

# <создание функции find_hip_hop()>
# функция принимает как параметры таблицу df и неверное название
# к столбцу 'genre_name' применяется специальный метод, 
# который заменяет второй параметр на строку 'hiphop'
# результат работы равен подсчитанному методом count() числу значений столбца, 
# которые равны второму параметру
# функция возвращает результат
find_hip_hop(df,'hip')# <замена одного неверного варианта на hiphop вызовом функции find_hip_hop()>
0
Получаем общую информацию о данных. Убеждаемся, что чистка выполнена успешно.

df.info()# <получение общей информации о данных таблицы df>
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 60126 entries, 0 to 60125
Data columns (total 7 columns):
user_id        60126 non-null object
track_name     60126 non-null object
artist_name    60126 non-null object
genre_name     60126 non-null object
city           60126 non-null object
time           60126 non-null object
weekday        60126 non-null object
dtypes: object(7)
memory usage: 3.2+ MB
Вывод

На этапе предобработки в данных обнаружились не только пропуски и проблемы с названиями столбцов, но и всяческие виды дубликатов. Их удаление позволит провести анализ точнее. Поскольку сведения о жанрах важно сохранить для анализа, не просто удаляем все пропущенные значения, но заполним пропущенные имена исполнителей и названия треков. Имена столбцов теперь корректны и удобны для дальнейшей работы.

Действительно ли музыку в разных городах слушают по-разному?
Была выдвинута гипотеза, что в Москве и Санкт-Петербурге пользователи слушают музыку по-разному. Проверяем это предположение по данным о трёх днях недели — понедельнике, среде и пятнице.

Для каждого города устанавливаем количество прослушанных в эти дни композиций с известным жанром, и сравниваем результаты.

Группируем данные по городу и вызовом метода count() подсчитываем композиции, для которых известен жанр.

df.groupby('city')['genre_name'].count()# <группировка данных таблицы df по столбцу 'city' и подсчёт количества значений столбца 'genre_name'>
city
Moscow              41892
Saint-Petersburg    18234
Name: genre_name, dtype: int64
В Москве прослушиваний больше, чем в Питере, но это не значит, что Москва более активна. У Яндекс.Музыки в целом больше пользователей в Москве, поэтому величины сопоставимы.

Сгруппируем данные по дню недели и подсчитаем прослушанные в понедельник, среду и пятницу композиции, для которых известен жанр.

df.groupby('weekday')['genre_name'].count()# <группировка данных по столбцу 'weekday' и подсчёт количества значений столбца 'genre_name'>
weekday
Friday       21482
Monday       20866
Wednesday    17778
Name: genre_name, dtype: int64
Понедельник и пятница — время для музыки; по средам пользователи немного больше вовлечены в работу.

Создаём функцию number_tracks(), которая принимает как параметры таблицу, день недели и название города, а возвращает количество прослушанных композиций, для которых известен жанр. Проверяем количество прослушанных композиций для каждого города и понедельника, затем среды и пятницы.

def number_tracks(df, day, city):
    track_list = df[(df['weekday'] == day) & (df['city'] == city)]
    track_list_count = track_list['genre_name'].count()
    return track_list_count

# <создание функции number_tracks()>
# объявляется функция с тремя параметрами: df, day, city
# в переменной track_list сохраняются те строки таблицы df, для которых 
# значение в столбце 'weekday' равно параметру day
# и одновременно значение в столбце 'city' равно параметру city
# в переменной track_list_count сохраняется число значений столбца 'genre_name',
# рассчитанное методом count() для таблицы track_list
# функция возвращает значение track_list_count
df[(df['weekday'] == 'Monday') & (df['city'] == 'Moscow')]# <список композиций для Москвы в понедельник>
user_id	track_name	artist_name	genre_name	city	time	weekday
4	E2DC1FAE	Soul People	Space Echo	dance	Moscow	08:34:34	Monday
10	BC5A3A29	Gool la Mita	Shireen Abdul Wahab	world	Moscow	14:08:42	Monday
11	8B5192C0	Is There Anybody Out There? (Panoramic Paralys...	Pink Floyd Floydhead	electronic	Moscow	13:47:49	Monday
12	FF3FD2BD	Мина син генэ кирэк	Ильдар Хакимов	pop	Moscow	09:19:49	Monday
19	201CF2A8	Ya'll In Trouble	Lil Tee Chill Tank Young Buck Brother Mohammed...	hiphop	Moscow	08:46:03	Monday
...	...	...	...	...	...	...	...
60086	3D9BF4F3	Alarm	Wise Blood	alternative	Moscow	20:50:35	Monday
60092	57B3F0CE	Флоу	Yanix	rusrap	Moscow	20:50:13	Monday
60097	9656377C	Algun Dia	Om Ovnimoon	downtempo	Moscow	08:10:59	Monday
60098	85A7CFD3	Working Class Hero	Marianne Faithfull	rock	Moscow	14:51:37	Monday
60120	83A474E7	I Worship Only What You Bleed	The Black Dahlia Murder	extrememetal	Moscow	21:07:12	Monday
15347 rows × 7 columns

df[(df['weekday'] == 'Monday') & (df['city'] == 'Saint-Petersburg')]# <список композиций для Санкт-Петербурга в понедельник>
user_id	track_name	artist_name	genre_name	city	time	weekday
3	A3DD03C9	Dragons in the Sunset	Fire + Ice	folk	Saint-Petersburg	08:37:09	Monday
15	81D05C7D	SLAVES OF FEAR	HEALTH	alternative	Saint-Petersburg	20:54:48	Monday
16	39DE290E	Веснянка	Веданъ Колодъ	folk	Saint-Petersburg	14:36:47	Monday
17	58AE138A	Pat-a-Cake	Mother Goose Club	children	Saint-Petersburg	20:04:56	Monday
25	982219FD	We Not Speak Americano	Genio Band	pop	Saint-Petersburg	20:03:03	Monday
...	...	...	...	...	...	...	...
60112	D94F810B	Theme from the Walking Dead	Proyecto Halloween	film	Saint-Petersburg	21:14:40	Monday
60113	BC8EC5CF	Red Lips: Gta (Rover Rework)	Rover	electronic	Saint-Petersburg	21:06:50	Monday
60114	29E04611	Bre Petrunko	Perunika Trio	world	Saint-Petersburg	13:56:00	Monday
60115	1B91C621	(Hello) Cloud Mountain	sleepmakeswaves	postrock	Saint-Petersburg	09:22:13	Monday
60122	D08D4A55	Maybe One Day (feat. Black Spade)	Blu & Exile	hiphop	Saint-Petersburg	10:00:00	Monday
5519 rows × 7 columns

df[(df['weekday'] == 'Wednesday') & (df['city'] == 'Moscow')]# <список композиций для Москвы в среду>
user_id	track_name	artist_name	genre_name	city	time	weekday
6	4CB90AA5	True	Roman Messer	dance	Moscow	13:00:07	Wednesday
7	F03E1C1F	Feeling This Way	Polina Griffith	dance	Moscow	20:47:49	Wednesday
18	772F5B59	Sweetback	The Fabulous Three	rnb	Moscow	13:56:42	Wednesday
27	D8D698A9	Romantici	Viola Valentino	pop	Moscow	08:23:21	Wednesday
34	FCDF1C8E	Nasebanaru	Zen	reggae	Moscow	20:19:36	Wednesday
...	...	...	...	...	...	...	...
60105	6A71CB92	Remind Me To Forget You	Sarah Geronimo	pop	Moscow	14:21:28	Wednesday
60107	8624CE71	Treasures and Trolls	Tera Melos	alternative	Moscow	13:02:57	Wednesday
60109	574EBCB0	Turn up the Radio	Autograph	rock	Moscow	13:45:39	Wednesday
60116	9E65547F	Fascinating Rhythm	Mark Murphy	jazz	Moscow	20:29:09	Wednesday
60121	729CBB09	My Name	McLean	rnb	Moscow	13:32:28	Wednesday
10865 rows × 7 columns

df[(df['weekday'] == 'Wednesday') & (df['city'] == 'Saint-Petersburg')]# <список композиций для Санкт-Петербурга в среду>
user_id	track_name	artist_name	genre_name	city	time	weekday
0	FFB692EC	Kamigata To Boots	The Mass Missile	rock	Saint-Petersburg	20:28:33	Wednesday
2	20EC38	Funiculì funiculà	Mario Lanza	pop	Saint-Petersburg	20:58:07	Wednesday
9	E772D5C0	Pessimist	unknown	dance	Saint-Petersburg	21:20:49	Wednesday
14	94EB25C2	Make Love Whenever You Can	Arabesque	pop	Saint-Petersburg	13:22:08	Wednesday
21	B8E29C9C	Самота	unknown	folk	Saint-Petersburg	20:20:49	Wednesday
...	...	...	...	...	...	...	...
60079	B6AE319B	Mind Body and Soul	Kidd Kurrupt	dance	Saint-Petersburg	14:43:29	Wednesday
60082	27047C8	Револьвер	unknown	rusrap	Saint-Petersburg	21:52:57	Wednesday
60090	64E06740	I Used To	Lunatic Wolf	rock	Saint-Petersburg	14:18:41	Wednesday
60096	95104ED1	Break the Mold	Authority Zero	punk	Saint-Petersburg	13:49:40	Wednesday
60110	F170C7C0	Back to Black	Soul Deep	rnb	Saint-Petersburg	14:30:52	Wednesday
6913 rows × 7 columns

df[(df['weekday'] == 'Friday') & (df['city'] == 'Moscow')]# <список композиций для Москвы в пятницу>
user_id	track_name	artist_name	genre_name	city	time	weekday
1	55204538	Delayed Because of Accident	Andreas Rönnberg	rock	Moscow	14:07:09	Friday
8	8FA1D3BE	И вновь продолжается бой	unknown	ruspop	Moscow	09:17:40	Friday
13	CC782B0F	After School Special	Detroit Grand Pubahs	dance	Moscow	20:04:12	Friday
33	B416A40F	Лучшая подруга	Супердетки	ruspop	Moscow	14:49:21	Friday
40	F9AD83A7	Иреннэр	Гузель Уразова	tatar	Moscow	14:53:39	Friday
...	...	...	...	...	...	...	...
60118	92378E24	Swing it Like You Mean it	OJOJOJ	techno	Moscow	21:12:56	Friday
60119	C532021D	We Can Not Be Silenced	Pänzer	extrememetal	Moscow	08:38:24	Friday
60123	C5E3A0D5	Jalopiina	unknown	industrial	Moscow	20:09:26	Friday
60124	321D0506	Freight Train	Chas McDevitt	rock	Moscow	21:43:59	Friday
60125	3A64EF84	Tell Me Sweet Little Lies	Monica Lopez	country	Moscow	21:59:46	Friday
15680 rows × 7 columns

df[(df['weekday'] == 'Friday') & (df['city'] == 'Saint-Petersburg')]# <список композиций для Санкт-Петербурга в пятницу>
user_id	track_name	artist_name	genre_name	city	time	weekday
5	842029A1	Преданная	IMPERVTOR	rusrap	Saint-Petersburg	13:09:41	Friday
29	EBA5A8B2	Päivän Nousu Nostajani	Värttinä	world	Saint-Petersburg	08:00:31	Friday
30	F6A44469	Veritas Universalis	Devathorn	metal	Saint-Petersburg	20:19:42	Friday
36	14FBD1E5	Solteras	Beauty Brain	dance	Saint-Petersburg	20:33:11	Friday
47	2A35001B	Can You Feel the Love Tonight	Disney Peaceful Piano	instrumental	Saint-Petersburg	21:51:37	Friday
...	...	...	...	...	...	...	...
60083	E82DA566	I Hate You More Than My Life	Solar Fake	electronic	Saint-Petersburg	20:55:55	Friday
60089	A84E445	Oasis	Dmitry Aeolus	electronic	Saint-Petersburg	08:32:46	Friday
60091	2AD78C04	Welcome to Zombietown	Dirty Wee Middens	punk	Saint-Petersburg	08:57:42	Friday
60094	CDCAFD62	Payday	King Hot	hiphop	Saint-Petersburg	14:31:37	Friday
60101	E54A55E0	What R U Doin' Here	KALLY'S Mashup Cast	pop	Saint-Petersburg	13:10:19	Friday
5802 rows × 7 columns

Сведём полученную информацию в одну таблицу, где ['city', 'monday', 'wednesday', 'friday'] названия столбцов.

import pandas as pd
data = [['Moscow', 15347, 10865, 15680],
        ['Saint-Petersburg', 5519, 6913, 5802]] 
columns = ['city', 'monday', 'wednesday', 'friday']
table = pd.DataFrame(data = data, columns = columns)# <таблица с полученными данными>
Вывод

Результаты показывают, что относительно среды музыку в Петербурге и Москве слушают «зеркально»: в Москве пики приходятся на понедельник и пятницу, а в среду время прослушивания снижается. Тогда как в Санкт-Петербурге среда — день самого большого интереса к музыке, а в понедельник и пятницу он меньше, причём почти одинаково меньше.

Утро понедельника и вечер пятницы — разная музыка или одна и та же?
Ищем ответ на вопрос, какие жанры преобладают в разных городах в понедельник утром и в пятницу вечером. Есть предположение, что в понедельник утром пользователи слушают больше бодрящей музыки (например, жанра поп), а вечером пятницы — больше танцевальных (например, электронику).

Получим таблицы данных по Москве moscow_general и по Санкт-Петербургу spb_general.

moscow_general  = df[df['city'] == 'Moscow']
# получение таблицы moscow_general из тех строк таблицы df, 
# для которых значение в столбце 'city' равно 'Moscow'
spb_general = df[df['city'] == 'Saint-Petersburg']# <получение таблицы spb_general>
Создаём функцию genre_weekday(), которая возвращает список жанров по запрошенному дню недели и времени суток с такого-то часа по такой-то.

def genre_weekday(df, day, time1, time2):
    genre_list = df[(df['weekday'] == day) & (df['time']>time1) & (df['time']<time2)]
    genre_list_sorted = genre_list.groupby('genre_name')['genre_name'].count().sort_values(ascending= False).head(10)
    return genre_list_sorted
    # объявление функции genre_weekday() с параметрами df, day, time1, time2
# в переменной genre_list сохраняются те строки df, для которых одновременно:
# 1) значение в столбце 'weekday' равно параметру day,
# 2) значение в столбце 'time' больше time1 и
# 3) меньше time2.
# в переменной genre_list_sorted сохраняются в порядке убывания  
# первые 10 значений Series, полученной подсчётом числа значений 'genre_name'
# сгруппированной по столбцу 'genre_name' таблицы genre_list
# функция возвращает значение genre_list_sorted
Cравниваем полученные результаты по таблице для Москвы и Санкт-Петербурга в понедельник утром (с 7 до 11) и в пятницу вечером (с 17 до 23).

genre_weekday(moscow_general, 'Monday','07:00:00', '11:00:00') # <вызов функции для утра понедельника в Москве (вместо df таблица moscow_general)>
genre_name
pop            781
dance          549
electronic     480
rock           474
hiphop         286
ruspop         186
world          181
rusrap         175
alternative    164
classical      157
Name: genre_name, dtype: int64
genre_weekday(spb_general, 'Monday', '07:00:00', '11:00:00')#вызов функции для утра понедельника в Петербурге (вместо df таблица spb_general)>
genre_name
pop            218
dance          182
rock           162
electronic     147
hiphop          80
ruspop          64
alternative     58
rusrap          55
jazz            44
classical       40
Name: genre_name, dtype: int64
genre_weekday(moscow_general, 'Friday', '17:00:00', '23:00:00') # <вызов функции для вечера пятницы в Москве>
genre_name
pop            713
rock           517
dance          495
electronic     482
hiphop         273
world          208
ruspop         170
alternative    163
classical      163
rusrap         142
Name: genre_name, dtype: int64
genre_weekday(spb_general, 'Friday', '17:00:00', '23:00:00')# <вызов функции для вечера пятницы в Питере>
genre_name
pop            256
rock           216
electronic     216
dance          210
hiphop          97
alternative     63
jazz            61
classical       60
rusrap          59
world           54
Name: genre_name, dtype: int64
Популярные жанры в понедельник утром в Питере и Москве оказались похожи: везде, как и предполагалось, популярен поп. Несмотря на это, концовка топ-10 для двух городов различается: в Питере в топ-10 входит джаз и русский рэп, а в Москве жанр world.

В конце недели ситуация не меняется. Поп-музыка всё так же на первом месте. Опять разница заметна только в концовке топ-10, где в Питере пятничным вечером тоже присутствует жанр world.

Вывод

Жанр поп безусловный лидер, а топ-5 в целом не различается в обеих столицах. При этом видно, что концовка списка более «живая»: для каждого города выделяются более характерные жанры, которые действительно меняют свои позиции в зависимости от дня недели и времени.

Москва и Питер — две разные столицы, два разных направления в музыке. Правда?
Гипотеза: Питер богат своей рэп-культурой, поэтому это направление там слушают чаще, а Москва — город контрастов, но основная масса пользователей слушает попсу.

Сгруппируем таблицу moscow_general по жанру, сосчитаем численность композиций каждого жанра методом count(), отсортируем в порядке убывания и сохраним результат в таблице moscow_genres.

Просмотрим первые 10 строк этой новой таблицы.

moscow_genres = moscow_general.groupby('genre_name')['genre_name'].count().sort_values(ascending = False)
# одной строкой: группировка таблицы moscow_general по столбцу 'genre_name', 
# подсчёт числа значений 'genre_name' в этой группировке методом count(), 
# сортировка Series в порядке убывания и сохранение в moscow_genres
moscow_genres.head(10)# <просмотр первых 10 строк moscow_genres>
genre_name
pop            5892
dance          4435
rock           3965
electronic     3786
hiphop         2096
classical      1616
world          1432
alternative    1379
ruspop         1372
rusrap         1161
Name: genre_name, dtype: int64
Сгруппируем таблицу spb_general по жанру, сосчитаем численность композиций каждого жанра методом count(), отсортируем в порядке убывания и сохраним результат в таблице spb_genres.

Просматриваем первые 10 строк этой таблицы. Теперь можно сравнивать два города.

spb_genres = spb_general.groupby('genre_name')['genre_name'].count().sort_values(ascending = False) # <группировка таблицы spb_general, расчёт, сохранение в spb_genres>
spb_genres.head(10)# <просмотр первых 10 строк spb_genres>
genre_name
pop            2431
dance          1932
rock           1879
electronic     1736
hiphop          960
alternative     649
classical       646
rusrap          564
ruspop          538
world           515
Name: genre_name, dtype: int64
Вывод

В Москве, кроме абсолютно популярного жанра поп, есть направление русской популярной музыки. Значит, что интерес к этому жанру шире. А рэп, вопреки предположению, занимает в обоих городах близкие позиции.

Этап 4. Результаты исследования
Рабочие гипотезы:

музыку в двух городах — Москве и Санкт-Петербурге — слушают в разном режиме;

списки десяти самых популярных жанров утром в понедельник и вечером в пятницу имеют характерные отличия;

население двух городов предпочитает разные музыкальные жанры.

Общие результаты

Москва и Петербург сходятся во вкусах: везде преобладает популярная музыка. При этом зависимости предпочтений от дня недели в каждом отдельном городе нет — люди постоянно слушают то, что им нравится. Но между городами в разрезе дней неделей наблюдается зеркальность относительно среды: Москва больше слушает в понедельник и пятницу, а Петербург наоборот - больше в среду, но меньше в понедельник и пятницу.

В результате первая гипотеза < укажите подтверждена/не подтверждена>, вторая гипотеза < укажите подтверждена/не подтверждена > и третья < укажите подтверждена/не подтверждена >.

Первая гипотеза подтверждена, вторая гипотеза не подтверждена, третья гипотеза не подтверждена.
